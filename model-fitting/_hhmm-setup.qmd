<!-- Because this file is incorporated as a child of fit-hhmms.qmd, it does not have its own YAML header and can not be rendered on its own. -->

## Define the hierarchical structure

```{r, hier-structure-tree}
library(data.tree)
### define hierarchical HMM
### states 1-3 = coarse state 1 (baseline)
### states 4-6 = coarse state 2 (exposure)
hierStates <- data.tree::Node$new("Ziphius Behavior HHMM")
hierStates$AddChild(name="dive_cycle")
hierStates$dive_cycle$AddChild(name="b1", state=1)
hierStates$dive_cycle$AddChild(name="b2", state=2)
hierStates$dive_cycle$AddChild(name="b3", state=3)
hierStates$dive_cycle$AddChild(name="b4", state=4)
hierStates$AddChild(name="exposed_dive_cycle")
hierStates$exposed_dive_cycle$AddChild(name="e1", state=5)
hierStates$exposed_dive_cycle$AddChild(name="e2", state=6)
hierStates$exposed_dive_cycle$AddChild(name="e3", state=7)
hierStates$exposed_dive_cycle$AddChild(name="e4", state=8)
plot(hierStates)
```

```{r, data-stream-distributions}
# level 1 = coarse scale 
# level 2 = fine scale 
hierDist <- data.tree::Node$new("Ziphius Behavior HHMM Distributions")
hierDist$AddChild(name="level1")
hierDist$AddChild(name="level2")

# coarse scale
hierDist$level1$AddChild(name="dur_hours", dist="gamma")
hierDist$level1$AddChild(name="fd_dur_hours", dist="gamma")
hierDist$level1$AddChild(name="surf_hours", dist="gamma")
hierDist$level1$AddChild(name="step", dist="gamma") # greater during exposure
hierDist$level1$AddChild(name="click_dur_mins", dist="gamma")
hierDist$level1$AddChild(name="longest_nf_dur_hours", dist="gamma")

# fine scale
hierDist$level2$AddChild(name="pct90_msa", dist="gamma")
hierDist$level2$AddChild(name="strokes_per_sec", dist="weibull") # will have 0 mass
hierDist$level2$AddChild(name="clicks_present", dist="bern")
hierDist$level2$AddChild(name="std_head", dist = "gamma")

# plot(hierDist) # (too small to see)
```

Initial (lack of) TPM covariates

```{r, tpm-no-covs}
# define hierarchical t.p.m. formula(s)
hierFormula <- data.tree::Node$new("Ziphius HHMM TPM covariates")
hierFormula$AddChild(name = "level1", formula = ~1)

hierFormula$AddChild(name = "level2", formula = ~1)

```

## Constraints and Design Matrix

If we want to constrain the state-dependent fine scale distributions to
be THE SAME for baseline/exposure - probably we want this and then the
TPM has covariates that depend on sonar, but the actual STATES do NOT.

```{r, constrain-fine}
# these are to make sure that the 4 finescale states are the same in both exposed/baseline coarse states
nbStates <- length(hierStates$Get("state",
                                  filterFun = data.tree::isLeaf))

nFine <- 4

fournames <- c("_15:(Intercept)",
               "_26:(Intercept)",
               "_37:(Intercept)",
               "_48:(Intercept)")

# constrain fine-scale data stream distributions to be same
# DM has to have a list entry for EVERY DATA STREAM
# matrices will have nrows = nparams in state-dep dist * nstates
# and ncols = (n fine states in 1 coarse state) * nparams in state-dep dist
my_gamnorm_DM <- matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(nFine)), # diag(number of fine states)
                      kronecker(c(0,0,1,1,0,0),diag(nFine)), # c(as many ones as you have coarse states, total vector length = n params * n coarse states)
                      kronecker(c(0,0,0,0,1,1),diag(nFine))),
                nrow=nbStates*3, # number of states * nparams per state?
                ncol=3*nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("mean_",1:nbStates),
                                paste0("sd_",1:nbStates),
                                paste0("zeromass_",1:nbStates)),
                        paste0(rep(c("mean","sd","zeromass"),each=nFine),
                                     fournames)))

my_weib_DM <- matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(nFine)), # diag(number of fine states)
                      kronecker(c(0,0,1,1,0,0),diag(nFine)), # c(as many ones as you have coarse states, total vector length = n params * n coarse states)
                      kronecker(c(0,0,0,0,1,1),diag(nFine))),
                nrow=nbStates*3, # number of states * nparams per state?
                ncol=3*nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("shape_",1:nbStates),
                                paste0("scale_",1:nbStates),
                                paste0("zeromass_",1:nbStates)),
                              paste0(rep(c("shape","scale","zeromass"),each=nFine),
                                     fournames)))

my_vm_DM <- matrix(cbind(kronecker(c(1,1,0,0),diag(nFine)), # diag(number of fine states)
                      kronecker(c(0,0,1,1),diag(nFine)) # c(as many ones as you have coarse states, total vector length = n params * n coarse states)
                      ),
                nrow=nbStates*2, # number of states * nparams per state?
                ncol=2*nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("mean_",1:nbStates),
                                paste0("concentration_",1:nbStates)),
                              
                              paste0(rep(c("mean","concentration"),each=nFine),
                                     fournames)))

my_nb_DM <- matrix(cbind(kronecker(c(1,1,0,0),diag(nFine)), # diag(number of fine states)
                      kronecker(c(0,0,1,1),diag(nFine)) # c(as many ones as you have coarse states, total vector length = n params * n coarse states)
                      ),
                nrow=nbStates*2, # number of states * nparams per state?
                ncol=2*nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("mean_",1:nbStates),
                                paste0("size_",1:nbStates)),
                              
                              paste0(rep(c("mean","size"),each=nFine),
                                     fournames)))
my_beta_DM <- matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(nFine)), # diag(number of fine states)
                      kronecker(c(0,0,1,1,0,0),diag(nFine)), # c(as many ones as you have coarse states, total vector length = n params * n coarse states)
                      kronecker(c(0,0,0,0,1,1),diag(nFine))
                      ),
                nrow=nbStates*3, # number of states * nparams per state?
                ncol=3*nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("shape1_",1:nbStates),
                                paste0("shape2_",1:nbStates),
                                paste0("zeromass_",1:nbStates)),
                              
                              paste0(rep(c("shape1","shape2", "zeromass"),each=nFine),
                                     fournames)))

my_nb_DM <- matrix(cbind(kronecker(c(1,1,0,0),diag(nFine)), # diag(number of fine states)
                      kronecker(c(0,0,1,1),diag(nFine)) # c(as many ones as you have coarse states, total vector length = n params * n coarse states)
                      ),
                nrow=nbStates*2, # number of states * nparams per state?
                ncol=2 * nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("mean_",1:nbStates),
                                paste0("size_",1:nbStates)),
                              
                              paste0(rep(c("mean","size"),each=nFine),
                                     fournames)))

my_cat_DM <- matrix(cbind(kronecker(c(1,1),diag(nFine)) # diag(number of fine states)
                      ),
                nrow=nbStates*1, # number of states * nparams per state?
                ncol=1*nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("prob_",1:nbStates)),
                                paste0(rep(c("prob"),each=nFine),
                                     fournames)))

```

We must constrain the fine-scale states within each coarse-scale state
to have the same parameters for the state-dependent distributions at the
coarse scale.

```{r, constrain-coarse}
# gamma, normal
my_gamnorm_DM1 <- matrix(kronecker(diag(4),c(1,1,1,1)),
                                   nrow=2*nbStates,
                                   ncol=4,
                                   dimnames=list(paste0(rep(c("mean_","sd_"),each=nbStates)
                                                        ,1:nbStates),
                                                 c(paste0(rep(c("mean_","sd_"),each=2),
                                                          1:length(hierStates$children),
                                                          ":(Intercept)"))))
my_gamnorm_DM1z <- matrix(kronecker(diag(6),c(1,1,1,1)),
                                   nrow=3*nbStates,
                                   ncol=6,
                                   dimnames=list(paste0(rep(c("mean_","sd_", "zeromass_"),each=nbStates)
                                                        ,1:nbStates),
                                                 c(paste0(rep(c("mean_","sd_", "zeromass_"),each=2),
                                                          1:length(hierStates$children),
                                                          ":(Intercept)"))))
csel_col <- matrix(my_gamnorm_DM1[,2], ncol = 1)
csel_col[csel_col == 1] <- "mfa_csel_scale"
my_gamnorm_DM1csel <- cbind(my_gamnorm_DM1[,1:2], 
                           csel_col,
                           my_gamnorm_DM1[,3:4])
colnames(my_gamnorm_DM1csel)[3] <- "mean_2:csel"

rms_col <- matrix(my_gamnorm_DM1[,2], ncol = 1)
rms_col[rms_col == 1] <- "mfa_bb_rms_max_scale"
my_gamnorm_DM1rms <- cbind(my_gamnorm_DM1[,1:2], 
                           rms_col,
                           my_gamnorm_DM1[,3:4])
colnames(my_gamnorm_DM1rms)[3] <- "mean_2:rms"

# nbinom
my_nb_DM1 <- matrix(kronecker(diag(4),c(1,1,1,1)),
                                   nrow=2*nbStates,
                                   ncol=4,
                                   dimnames=list(paste0(rep(c("mean_","size_"),each=nbStates)
                                                        ,1:nbStates),
                                                 c(paste0(rep(c("mean_","size_"),each=2),
                                                          1:length(hierStates$children),
                                                          ":(Intercept)"))))

# von mises
my_vm_DM1 <- matrix(kronecker(diag(4),c(1,1,1,1)),
                                   nrow=2*nbStates,
                                   ncol=4,
                                   dimnames=list(paste0(rep(c("mean_","concentration_"),each=nbStates)
                                                        ,1:nbStates),
                                                 c(paste0(rep(c("mean_","concentration_"),each=2),
                                                          1:length(hierStates$children),
                                                          ":(Intercept)"))))
```

```{r, construct-DM}
# put together all the constraints in a list
DM <- list(pct90_msa = my_gamnorm_DM[1:(2*nbStates),1:8],
           std_head = my_gamnorm_DM[1:(2*nbStates),1:8],
           strokes_per_sec = my_weib_DM,
           clicks_present = my_cat_DM,
           dur_hours = my_gamnorm_DM1,
           fd_dur_hours = my_gamnorm_DM1,
           longest_nf_dur_hours = my_gamnorm_DM1,
           surf_hours = my_gamnorm_DM1,
           step = my_gamnorm_DM1,
           click_dur_mins = my_gamnorm_DM1
)
```