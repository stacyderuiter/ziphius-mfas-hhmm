---
title: "Simulation: Weights vs No Weights?"
format: 
  html:
    toc: true
    embed-resources: true
  typst: default
editor: source
---



```{r}
#| label: setup
#| include: false

library(momentuHMM)
library(tidyverse)
library(ggformula)


knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)

theme_set(theme_minimal(base_size = 18))

source('../utils/getLL.R')
```


# Read in fitted models

```{r, base-model}
model <- readRDS("../data/simulations/sim_starting_model.RDS")
data <- model$data

no_sonar_model <- readRDS("../data/simulations/sim_starting_model_no_sonar.RDS")
no_sonar_data <- no_sonar_model$data
```

# Preparation for Model Fitting

## Define the hierarchical structure

```{r, hier-structure-tree}
library(data.tree)
### define hierarchical HMM
### states 1-3 = coarse state 1 (baseline)
### states 4-6 = coarse state 2 (exposure)
hierStates <- data.tree::Node$new("Ziphius Behavior HHMM")
hierStates$AddChild(name="dive_cycle")
hierStates$dive_cycle$AddChild(name="b1", state=1)
hierStates$dive_cycle$AddChild(name="b2", state=2)
hierStates$dive_cycle$AddChild(name="b3", state=3)
hierStates$dive_cycle$AddChild(name="b4", state=4)
hierStates$AddChild(name="exposed_dive_cycle")
hierStates$exposed_dive_cycle$AddChild(name="e1", state=5)
hierStates$exposed_dive_cycle$AddChild(name="e2", state=6)
hierStates$exposed_dive_cycle$AddChild(name="e3", state=7)
hierStates$exposed_dive_cycle$AddChild(name="e4", state=8)
# plot(hierStates)
```

```{r, data-stream-distributions}
# level 1 = coarse scale 
# level 2 = fine scale 
hierDist <- data.tree::Node$new("Ziphius Behavior HHMM Distributions")
hierDist$AddChild(name="level1")
hierDist$AddChild(name="level2")

# coarse scale
hierDist$level1$AddChild(name="dur_hours", dist="gamma")
hierDist$level1$AddChild(name="fd_dur_hours", dist="gamma")
hierDist$level1$AddChild(name="surf_hours", dist="gamma")
hierDist$level1$AddChild(name="step", dist="gamma") # greater during exposure
hierDist$level1$AddChild(name="click_dur_mins", dist="gamma")
hierDist$level1$AddChild(name="longest_nf_dur_hours", dist="gamma")

# fine scale
hierDist$level2$AddChild(name="pct90_msa", dist="gamma")
hierDist$level2$AddChild(name="strokes_per_sec", dist="weibull") # will have 0 mass
hierDist$level2$AddChild(name="clicks_present", dist="bern")
hierDist$level2$AddChild(name="std_head", dist = "gamma")

# plot(hierDist) # (too small to see)
```

## Constraints and Design Matrix

```{r, constrain-fine}
# these are to make sure that the 4 finescale states are the same in both exposed/baseline coarse states
nbStates <- length(hierStates$Get("state",
                                  filterFun = data.tree::isLeaf))

nFine <- 4

fournames <- c("_15:(Intercept)",
               "_26:(Intercept)",
               "_37:(Intercept)",
               "_48:(Intercept)")

# constrain fine-scale data stream distributions to be same
# DM has to have a list entry for EVERY DATA STREAM
# matrices will have nrows = nparams in state-dep dist * nstates
# and ncols = (n fine states in 1 coarse state) * nparams in state-dep dist
my_gamnorm_DM <- matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(nFine)), # diag(number of fine states)
                      kronecker(c(0,0,1,1,0,0),diag(nFine)), # c(as many ones as you have coarse states, total vector length = n params * n coarse states)
                      kronecker(c(0,0,0,0,1,1),diag(nFine))),
                nrow=nbStates*3, # number of states * nparams per state?
                ncol=3*nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("mean_",1:nbStates),
                                paste0("sd_",1:nbStates),
                                paste0("zeromass_",1:nbStates)),
                        paste0(rep(c("mean","sd","zeromass"),each=nFine),
                                     fournames)))

my_weib_DM <- matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(nFine)), # diag(number of fine states)
                      kronecker(c(0,0,1,1,0,0),diag(nFine)), # c(as many ones as you have coarse states, total vector length = n params * n coarse states)
                      kronecker(c(0,0,0,0,1,1),diag(nFine))),
                nrow=nbStates*3, # number of states * nparams per state?
                ncol=3*nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("shape_",1:nbStates),
                                paste0("scale_",1:nbStates),
                                paste0("zeromass_",1:nbStates)),
                              paste0(rep(c("shape","scale","zeromass"),each=nFine),
                                     fournames)))

my_vm_DM <- matrix(cbind(kronecker(c(1,1,0,0),diag(nFine)), # diag(number of fine states)
                      kronecker(c(0,0,1,1),diag(nFine)) # c(as many ones as you have coarse states, total vector length = n params * n coarse states)
                      ),
                nrow=nbStates*2, # number of states * nparams per state?
                ncol=2*nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("mean_",1:nbStates),
                                paste0("concentration_",1:nbStates)),
                              
                              paste0(rep(c("mean","concentration"),each=nFine),
                                     fournames)))

my_nb_DM <- matrix(cbind(kronecker(c(1,1,0,0),diag(nFine)), # diag(number of fine states)
                      kronecker(c(0,0,1,1),diag(nFine)) # c(as many ones as you have coarse states, total vector length = n params * n coarse states)
                      ),
                nrow=nbStates*2, # number of states * nparams per state?
                ncol=2*nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("mean_",1:nbStates),
                                paste0("size_",1:nbStates)),
                              
                              paste0(rep(c("mean","size"),each=nFine),
                                     fournames)))
my_beta_DM <- matrix(cbind(kronecker(c(1,1,0,0,0,0),diag(nFine)), # diag(number of fine states)
                      kronecker(c(0,0,1,1,0,0),diag(nFine)), # c(as many ones as you have coarse states, total vector length = n params * n coarse states)
                      kronecker(c(0,0,0,0,1,1),diag(nFine))
                      ),
                nrow=nbStates*3, # number of states * nparams per state?
                ncol=3*nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("shape1_",1:nbStates),
                                paste0("shape2_",1:nbStates),
                                paste0("zeromass_",1:nbStates)),
                              
                              paste0(rep(c("shape1","shape2", "zeromass"),each=nFine),
                                     fournames)))

my_nb_DM <- matrix(cbind(kronecker(c(1,1,0,0),diag(nFine)), # diag(number of fine states)
                      kronecker(c(0,0,1,1),diag(nFine)) # c(as many ones as you have coarse states, total vector length = n params * n coarse states)
                      ),
                nrow=nbStates*2, # number of states * nparams per state?
                ncol=2 * nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("mean_",1:nbStates),
                                paste0("size_",1:nbStates)),
                              
                              paste0(rep(c("mean","size"),each=nFine),
                                     fournames)))

my_cat_DM <- matrix(cbind(kronecker(c(1,1),diag(nFine)) # diag(number of fine states)
                      ),
                nrow=nbStates*1, # number of states * nparams per state?
                ncol=1*nFine, # n params * n fine states in 1 coarse?
                dimnames=list(c(# first params for each state
                                paste0("prob_",1:nbStates)),
                                paste0(rep(c("prob"),each=nFine),
                                     fournames)))

```

We must constrain the fine-scale states within each coarse-scale state
to have the same parameters for the state-dependent distributions at the
coarse scale.

```{r, constrain-coarse}
# gamma, normal
my_gamnorm_DM1 <- matrix(kronecker(diag(4),c(1,1,1,1)),
                                   nrow=2*nbStates,
                                   ncol=4,
                                   dimnames=list(paste0(rep(c("mean_","sd_"),each=nbStates)
                                                        ,1:nbStates),
                                                 c(paste0(rep(c("mean_","sd_"),each=2),
                                                          1:length(hierStates$children),
                                                          ":(Intercept)"))))
my_gamnorm_DM1z <- matrix(kronecker(diag(6),c(1,1,1,1)),
                                   nrow=3*nbStates,
                                   ncol=6,
                                   dimnames=list(paste0(rep(c("mean_","sd_", "zeromass_"),each=nbStates)
                                                        ,1:nbStates),
                                                 c(paste0(rep(c("mean_","sd_", "zeromass_"),each=2),
                                                          1:length(hierStates$children),
                                                          ":(Intercept)"))))
# nbinom
my_nb_DM1 <- matrix(kronecker(diag(4),c(1,1,1,1)),
                                   nrow=2*nbStates,
                                   ncol=4,
                                   dimnames=list(paste0(rep(c("mean_","size_"),each=nbStates)
                                                        ,1:nbStates),
                                                 c(paste0(rep(c("mean_","size_"),each=2),
                                                          1:length(hierStates$children),
                                                          ":(Intercept)"))))

# von mises
my_vm_DM1 <- matrix(kronecker(diag(4),c(1,1,1,1)),
                                   nrow=2*nbStates,
                                   ncol=4,
                                   dimnames=list(paste0(rep(c("mean_","concentration_"),each=nbStates)
                                                        ,1:nbStates),
                                                 c(paste0(rep(c("mean_","concentration_"),each=2),
                                                          1:length(hierStates$children),
                                                          ":(Intercept)"))))
```

```{r, construct-DM}
# put together all the constraints in a list
DM <- list(pct90_msa = my_gamnorm_DM[1:(2*nbStates),1:8],
           std_head = my_gamnorm_DM[1:(2*nbStates),1:8],
           strokes_per_sec = my_weib_DM,
           clicks_present = my_cat_DM,
           
           dur_hours = my_gamnorm_DM1,
           fd_dur_hours = my_gamnorm_DM1,
           longest_nf_dur_hours = my_gamnorm_DM1,
           
           surf_hours = my_gamnorm_DM1,
           
           step = my_gamnorm_DM1,
           
           click_dur_mins = my_gamnorm_DM1
) 
```

# Case 1: True Model Includes MFAS Effect

```{r}
model <- model
nbAnimals <- length(unique(data$ID)) # 13 like ours

l1obs <- data |> 
  filter(level == "1") |> 
  group_by(whale_ID) |> 
  summarise(nobs = n()) |> 
  ungroup() |>
  pull(nobs) |> 
  as.list()
l2obs <- data |> 
  filter(level == "2") |> 
  group_by(whale_ID, dive_cycle_num) |> 
  summarise(nobs = n()) |> 
  filter(nobs > 1) |>
  ungroup(dive_cycle_num) |>
  summarise(min_l2 = min(nobs),
            max_l2 = max(nobs)) |>
  ungroup()

obsPerLevel <- list()
for (a in c(1:nbAnimals)){
  obsPerLevel[[a]] <- data.tree::Node$new("N Obs")
  obsPerLevel[[a]]$AddChild(name = "level1", 
                           obs = l1obs[[a]])
  obsPerLevel[[a]]$AddChild(name = "level2", 
                           obs = c(pull(l2obs, "min_l2") |> nth(a),
                                   pull(l2obs, "max_l2") |> nth(a)))
}

```

```{r sim-model-list}
sim_model_meta <- data.frame(model_name = 
                              c(
                              "rl_coarse",
                              "no_sonar",
                              "rl_coarse_wt",
                              'no_sonar_wt'
                                ),
                            coarse_formula = c(
                              "~mfa_bb_rms_max_scale",
                              "~1",
                              "~mfa_bb_rms_max_scale",
                              "~1"
                              ),
                            fine_formula = c("~1",
                                             "~1",
                                             "~1",
                                             "~1"
                                             ),
                            weights = c(FALSE,
                                        FALSE,
                                        TRUE,
                                        TRUE)
                            )

sim_model_meta <- sim_model_meta |>
  as.data.frame()

```

```{r, fit-sim-models}
n_sim_cycles <- 1
sim_results <- list()

for (c in c(1:n_sim_cycles)){
  message(paste("Simulating dataset:", c, "..."))
  mySimData <- simHierData(model = model,
                         nbAnimals = length(unique(data$ID)),
                         obsPerLevel = obsPerLevel,
                         covs = data |> filter(level == "1") |> select(mfa_bb_rms_max_scale))
  sim_results[[c]] <- data.frame(sim_num = rep(c, nrow(sim_model_meta)),
                                 model_name = sim_model_meta$model_name,
                                 LL = rep(NA, nrow(sim_model_meta)),
                                 AIC = rep(NA, nrow(sim_model_meta)),
                                 t15est = rep(NA, nrow(sim_model_meta)),
                                 t15upper = rep(NA, nrow(sim_model_meta)),
                                 t15lower = rep(NA, nrow(sim_model_meta)),
                                 t15se = rep(NA, nrow(sim_model_meta)),
                                 t51est = rep(NA, nrow(sim_model_meta)),
                                 t51upper = rep(NA, nrow(sim_model_meta)),
                                 t51lower = rep(NA, nrow(sim_model_meta)),
                                 t51se = rep(NA, nrow(sim_model_meta))
  )
  for (m in c(1:nrow(sim_model_meta))){
      message(paste('Simulation', c, 'of', n_sim_cycles, 
                    '- Fitting model', m, 'of', nrow(sim_model_meta), 
                    '. Model name:', sim_model_meta[m, "model_name"]))
      hierFormula <- data.tree::Node$new("Ziphius HHMM TPM covariates")
      hierFormula$AddChild(name = "level1", 
                           formula = as.formula(sim_model_meta[m, "coarse_formula"]))
      hierFormula$AddChild(name = "level2", 
                           formula = as.formula(sim_model_meta[m, "fine_formula"]))
      
      Par0 <- getPar0(model,
                      hierFormula = hierFormula)
      hierBeta0 <- Par0$hierBeta
      hierDelta0 <- Par0$hierDelta
      Par0 <- Par0$Par
      
      # fit model
      this_fit <- try(fitHMM(mySimData,
                             weights = rep(1, nrow(mySimData)) +
                               rep(as.numeric(sim_model_meta[m, "weights"], 
                                              nrow(mySimData))) * 
                               (mySimData$level == "1") * 33,
                             hierStates = hierStates,
                             hierDist = hierDist,
                             hierFormula = hierFormula,
                             Par0 = Par0,
                             DM = DM,
                             hierBeta = hierBeta0,
                             hierDelta = hierDelta0,
                             optMethod = "nlm"),
      silent = TRUE
      )
      if ("momentuHMM" %in% class(this_fit)){
        this_CIbeta <- CIbeta(this_fit)
        sim_results[[c]][m, "LL"] <- getLL(this_fit)
        sim_results[[c]][m, "AIC"] <- AIC(this_fit)
        
        if (sim_model_meta[m, "coarse_formula"] == "~mfa_bb_rms_max_scale"){
          sim_results[[c]][m, "t15est"] <- this_CIbeta$beta$est['I((level == "1") * mfa_bb_rms_max_scale)', '1 -> 5']
          sim_results[[c]][m, "t15lower"] <- this_CIbeta$beta$lower['I((level == "1") * mfa_bb_rms_max_scale)', '1 -> 5']
          sim_results[[c]][m, "t15upper"] <- this_CIbeta$beta$upper['I((level == "1") * mfa_bb_rms_max_scale)', '1 -> 5']
          sim_results[[c]][m, "t15se"] <- this_CIbeta$beta$se['I((level == "1") * mfa_bb_rms_max_scale)', '1 -> 5']
          
          sim_results[[c]][m, "t51est"] <- this_CIbeta$beta$est['I((level == "1") * mfa_bb_rms_max_scale)', '5 -> 1']
          sim_results[[c]][m, "t51lower"] <- this_CIbeta$beta$lower['I((level == "1") * mfa_bb_rms_max_scale)', '5 -> 1']
          sim_results[[c]][m, "t51upper"] <- this_CIbeta$beta$upper['I((level == "1") * mfa_bb_rms_max_scale)', '5 -> 1']
          sim_results[[c]][m, "t51se"] <- this_CIbeta$beta$se['I((level == "1") * mfa_bb_rms_max_scale)', '5 -> 1']
          
        }
        
        saveRDS(sim_results, file = paste0("../data/simulations/sonar/",
                                              # each set of 10 will take ~ a few days to run.
                                              # change the file name each time you run 10 more
                                              # (I used a letter for each computer and a number for each repeat)
                                              "wt-sim-z1.RDS"))  
        gc()
        
      }
}# end of loop over models
} # end fitting cycles
```


# Case 2: True Model Excludes MFAS Effect


```{r, fit-sim-models2}
n_sim_cycles <- 10
sim_results <- list()


for (c in c(1:n_sim_cycles)){
  message(paste("Simulating dataset:", c, "..."))

  mySimData <- simHierData(model = no_sonar_model,
                           nbAnimals = length(unique(no_sonar_data$ID)),
                           obsPerLevel = obsPerLevel,
                           covs = data |> filter(level == "1") |>
                             select(mfa_bb_rms_max_scale))

  sim_results[[c]] <- data.frame(sim_num = rep(c, nrow(sim_model_meta)),
                                 model_name = sim_model_meta$model_name,
                                 LL = rep(NA, nrow(sim_model_meta)),
                                 AIC = rep(NA, nrow(sim_model_meta)),
                                 t15est = rep(NA, nrow(sim_model_meta)),
                                 t15upper = rep(NA, nrow(sim_model_meta)),
                                 t15lower = rep(NA, nrow(sim_model_meta)),
                                 t15se = rep(NA, nrow(sim_model_meta)),
                                 t51est = rep(NA, nrow(sim_model_meta)),
                                 t51upper = rep(NA, nrow(sim_model_meta)),
                                 t51lower = rep(NA, nrow(sim_model_meta)),
                                 t51se = rep(NA, nrow(sim_model_meta))
  )
  for (m in c(1:nrow(sim_model_meta))){
      message(paste('Simulation', c, 'of', n_sim_cycles, 
                    '- Fitting model', m, 'of', nrow(sim_model_meta), 
                    '. Model name:', sim_model_meta[m, "model_name"]))
      hierFormula <- data.tree::Node$new("Ziphius HHMM TPM covariates")
      hierFormula$AddChild(name = "level1", 
                           formula = as.formula(sim_model_meta[m, "coarse_formula"]))
      hierFormula$AddChild(name = "level2", 
                           formula = as.formula(sim_model_meta[m, "fine_formula"]))
      
      Par0 <- getPar0(no_sonar_model,
                      hierFormula = hierFormula)
      hierBeta0 <- Par0$hierBeta
      hierDelta0 <- Par0$hierDelta
      Par0 <- Par0$Par
      
      # fit model
      this_fit <- try(fitHMM(mySimData,
                             weights = rep(1, nrow(mySimData)) +
                                            rep(as.numeric(sim_model_meta[m, "weights"], nrow(mySimData))) * 
                                                  (mySimData$level == "1") * 33,
                             hierStates = hierStates,
                             hierDist = hierDist,
                             hierFormula = hierFormula,
                             Par0 = Par0,
                             DM = DM,
                             hierBeta = hierBeta0,
                             hierDelta = hierDelta0,
                             optMethod = "nlm"),
      silent = TRUE
      )
      if ("momentuHMM" %in% class(this_fit)){
        this_CIbeta <- CIbeta(this_fit)
        sim_results[[c]][m, "LL"] <- getLL(this_fit)
        sim_results[[c]][m, "AIC"] <- AIC(this_fit)
        
        if (sim_model_meta[m, "coarse_formula"] == "~mfa_bb_rms_max_scale"){
          sim_results[[c]][m, "t15est"] <- this_CIbeta$beta$est['I((level == "1") * mfa_bb_rms_max_scale)', '1 -> 5']
          sim_results[[c]][m, "t15lower"] <- this_CIbeta$beta$lower['I((level == "1") * mfa_bb_rms_max_scale)', '1 -> 5']
          sim_results[[c]][m, "t15upper"] <- this_CIbeta$beta$upper['I((level == "1") * mfa_bb_rms_max_scale)', '1 -> 5']
          sim_results[[c]][m, "t15se"] <- this_CIbeta$beta$se['I((level == "1") * mfa_bb_rms_max_scale)', '1 -> 5']
          
          sim_results[[c]][m, "t51est"] <- this_CIbeta$beta$est['I((level == "1") * mfa_bb_rms_max_scale)', '5 -> 1']
          sim_results[[c]][m, "t51lower"] <- this_CIbeta$beta$lower['I((level == "1") * mfa_bb_rms_max_scale)', '5 -> 1']
          sim_results[[c]][m, "t51upper"] <- this_CIbeta$beta$upper['I((level == "1") * mfa_bb_rms_max_scale)', '5 -> 1']
          sim_results[[c]][m, "t51se"] <- this_CIbeta$beta$se['I((level == "1") * mfa_bb_rms_max_scale)', '5 -> 1']
          
        }
        
        saveRDS(sim_results, file = paste0("../data/simulations/no_sonar/",
                                              # each batch of 10 will take ~ a few days
                                              # rename file below for each new batch
                                              # I used a letter for each computer and a number for each rep
                                              "wt-sim-z1.RDS"))  
        gc()
        
      }
}# end of loop over models
} # end fitting cycles
```




